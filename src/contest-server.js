/**
 * Nodejs Contest system for Seminarjs
 */

var bodyParser = require('body-parser'),
  User = require('./models/User.js');

module.exports = function (seminarjs) {
  console.log("[Start] Seminarjs Contest server");

  // Contest data, should also come from the db at some point
  // this might change quite a lot in future versions

  var contestData = [
    // Round 1: Objetos
    {
      input: [
        '{"0":1,"1":10,"2":[{"1":["yea",109,null],"test":"hey","no way":"nope"},"hey",34],"y mas aun":[1,2,3,"1","2"],"otros":["a",1888],"ok":[[[[[[[[[[[[[[[["ok"]]]]]]]]]]]]]]]]}',
        '{"yea":{"a":{"a":{"a":{"a":{"a":{"a":{"a":{"a":{"a":{"a":{"a":{"a":{"a":{"a":{"a":{"a":{"a":{"a":{"a":{"a":{"a":{"a":{"a":{"a":{"a":{"a":{"a":{"a":{"a":{"a":{"a":{"a":{"a":{"a":{"a":{"a":{"a":{"a":{"a":{"nope":[1,2,3],"yes":"yes"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}',
        '{"what":[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[{"a":[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[{"a":[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[{"a":"hello :)"}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}',
        ''
      ],

      output: [
        '8',
        '1',
        '1'
      ]
  },
  // Round 2: Binaria
    {
      input: ["5",
           "3",
           "238",
           "1",
           "123234",
           "12"
    ],
      output: ["Case #1: 2",
             "Case #2: 13",
             "Case #3: 1",
             "Case #4: 24",
             "Case #5: 5"
    ]
},
  // Round 3: Tesoro
    {
      input: [
    '+----+----+----+----+----+',
    '| 23 | 44 | 43 | 44 | 31 |',
    '+----+----+----+----+----+',
    '| 41 | 13 | 31 | 21 | 15 |',
    '+----+----+----+----+----+',
    '| 53 | 25 | 25 | 35 | 45 |',
    '+----+----+----+----+----+',
    '| 52 | 51 | 44 | 25 | 33 |',
    '+----+----+----+----+----+',
    '| 51 | 32 | 54 | 42 | 42 |',
    '+----+----+----+----+----+',
    '+----+----+----+----+----+',
    '| 11 | 24 | 43 | 31 | 31 |',
    '+----+----+----+----+----+',
    '| 34 | 31 | 11 | 21 | 31 |',
    '+----+----+----+----+----+',
    '| 54 | 21 | 35 | 53 | 24 |',
    '+----+----+----+----+----+',
    '| 51 | 14 | 45 | 54 | 53 |',
    '+----+----+----+----+----+',
    '| 25 | 52 | 32 | 53 | 34 |',
    '+----+----+----+----+----+'
    ],
      output: ['Camino:23, 31, 53, 54, 42, 51', 'Camino:']
},
  // Round 4: Interval
    {
      input: [
    '4 7 6 3 2 1 5',
    '30 14 13 34 38 12 3 10 36 22 1 29 6 39 15 28 33 21 5 31 17 16 32 18 25 35 40 4 7 11 27 20 9 8 37 23 24 2 19 26',
    '46 11 25 52 21 45 33 28 20 40 24 12 6 48 32 37 27 7 43 18 1 49 8 29 2 50 23 10 9 17 30 47 5 26 4 13 19 16 51 15 36 22 44 14 38 34 35 39 42 41 31 3',

    ],
      output: [
    '9',
    '79',
    '91',
    '1406'
  ]
  },
  // Round 5: Fito
    {
      input: [
    '#------\\-------/-------\\-------/',
    '------\\-/-/------\\-----#-------\\--/----------------\\--\\----\\--------/---',
    '------\\-/-/------\\-----#-------\\--/----------------\\--\\----\\--------/--------------'
  ],
      output: [
    '/#------\\',
    '|       |',
    '|       |',
    '|       |',
    '|       |',
    '|       |',
    '|       |',
    '|       |',
    '\\-------/',
    '/---------\\',
    '|         |',
    '|       /-/',
    '|       |',
    '|       |',
    '|       |',
    '|       |',
    '|       |',
    '|       |',
    '\\----\\  \\-----#-------\\',
    '     |                |',
    '     |                |',
    '     \\----------------/',
    'ERROR'
  ]
  },
  // Round 6: Plot
    {
      'input': ['3', 'y=x+1', '5', 'y=-5x-3', '1', 'y=-1x'],
      'output': [
'    #  / ',
'    # /  ',
'    #/   ',
'    #    ',
'#########',
'  / #    ',
' /  #    ',
'    #    ',
'    #    ',
'                            #                            ',
'                            #                            ',
'                            #                            ',
'                            #                            ',
'                            #                            ',
'                            #                            ',
'   \\                        #                            ',
'    \\                       #                            ',
'     \\                      #                            ',
'      \\                     #                            ',
'       \\                    #                            ',
'        \\                   #                            ',
'         \\                  #                            ',
'          \\                 #                            ',
'           \\                #                            ',
'            \\               #                            ',
'             \\              #                            ',
'              \\             #                            ',
'               \\            #                            ',
'                \\           #                            ',
'                 \\          #                            ',
'                  \\         #                            ',
'                   \\        #                            ',
'                    \\       #                            ',
'                     \\      #                            ',
'                      \\     #                            ',
'                       \\    #                            ',
'                        \\   #                            ',
'--#----#----#----#----#----#----#----#----#----#----#----',
'                          \\ #                            ',
'                           \\#                            ',
'                            #                            ',
'                            #\\                           ',
'                            # \\                          ',
'                            #  \\                         ',
'                            #   \\                        ',
'                            #    \\                       ',
'                            #     \\                      ',
'                            #      \\                     ',
'                            #       \\                    ',
'                            #        \\                   ',
'                            #         \\                  ',
'                            #          \\                 ',
'                            #           \\                ',
'                            #            \\               ',
'                            #             \\              ',
'                            #              \\             ',
'                            #               \\            ',
'                            #                \\           ',
'                            #                 \\          ',
'                            #                  \\         ',
'                            #                   \\        ',
'                            #                    \\       ',
'                            #                     \\      ',
'                            #                      \\     ',
'                            #                       \\    ',
'                            #                        \\   ',
'\\# ',
'###',
' #\\'
    ]
  }
 ];

  // Now expose the API endpoints
  seminarjs.app.get('/contest/input', function (req, res) {
    res.setHeader('Content-Type', 'text/plain');

    var token = req.query.token;

    getUserFromToken(token, function (user) {
      if (!user) {
        res.status(401).send('Error: Invalid token');
        return;
      } else {
        res.send(contestData[user.contest.round].input.join("\n"));
      }
    });
  });

  var textParser = bodyParser.text();

  seminarjs.app.post('/contest/output', textParser, function (req, res) {
    res.setHeader('Content-Type', 'text/plain');

    if (typeof req.body !== 'string' || !req.body || req.body.length < 1) return res.status(400).send('Error: No output received');

    var token = req.query.token;

    getUserFromToken(token, function (user) {
      if (!user) {
        res.status(401).send('Error: Invalid token');
        return;
      }

      // Make sure body is a string
      req.body += "";

      // Validate the output
      var output = req.body.split("\n"),
        total = contestData[user.contest.round].output.length,
        correct = 0;

      res.write('Welcome ' + user.name + "\n");
      res.write('Line	|	Status' + "\n");

      for (var i = 0; i < total; i++) {
        var line = i + '	|	',
          status = 'FAIL';
        if (typeof output[i] !== 'undefined' && output[i] == contestData[user.contest.round].output[i]) {
          correct++;
          status = 'OK';
        } else {
          console.log("[Verify] User=" + user.name + ', Round=' + user.contest.round + ', output=' + output[i]);
        }
        res.write(line + status + "\n");
      }

      res.write('--------------------------' + "\n");

      var passed = false,
        percentage = correct * 100 / total,
        status = 'FAIL';

      if (percentage == 100) {
        passed = true;
        status = 'OK';
      }

      res.write('STATUS ' + percentage + '% ' + status + "\n");

      if (percentage > user.contest.progress) {
        user.contest.progress = percentage;
        user.contest.date = Date.now();
      }

      if (passed) {
        //var token = Math.floor(Math.random() * 10000) + 100;

        //user.contest.token = token;
        user.contest.round = user.contest.round + 1;
        user.contest.progress = 0;
        user.contest.date = Date.now();

        res.write('New token: ' + user.contest.token);
      }

      user.save(function (err) {
        if (err) return handleError(err);

        res.end();
      });
    });

  });

  // --------------------------------------- //
  //          Internal functions             //
  // --------------------------------------- //

  /**
   * Return the user associated with a given token
   * @param  {String} token User token
   * @return {Object}       User data object
   */
  function getUserFromToken(token, callback) {

    User.findOne({
      'contest.token': token
    }, function (err, person) {
      if (err) {
        console.log('[ERROR] ' + err);
        callback(false);
      }
      callback(person);
    });
  }
}